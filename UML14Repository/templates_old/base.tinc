<?
string importJavaOverrides(map element) {
	if(element:Name eq 'Class') {
		'import org.soulspace.modelling.uml14.elements.Class;'
	} else if(element:Name eq 'Object') {
		'import org.soulspace.modelling.uml14.elements.Object;' 
	} else if(element:Name eq 'Package') {
		'import org.soulspace.modelling.uml14.elements.Package;' 
	} else if(element:Name eq 'Exception') {
		'import org.soulspace.modelling.uml14.elements.Exception;' 
	} else if(element:Name eq 'Enumeration') {
		'import org.soulspace.modelling.uml14.elements.Enumeration;' 
	} else if(element:Name eq 'EnumerationLiteral') {
		'import org.soulspace.modelling.uml14.elements.Enumeration;' 
	}
}

string importJavaOverrides() {
	importJavaOverrides(This)
}

string javaTypeForType(map type, string generic) {
	if(type:Namespace eq 'uml.Foundations.Data Types') {
		javaTypeForUmlType(type)
	} else if(generic) {
		type:Name + '<' + generic + '>'
	} else {
		type:Name
	}
}

numeric isSuppressedAssociation(map element, map asso) {
	(element:Name eq 'Instance' && asso:Name eq 'owner')
	||
	(element:Name eq 'Instance' && asso:Name eq 'ownedInstance')
	||
	(element:Name eq 'LinkObject' && asso:Name eq 'owner')
	||
	(element:Name eq 'LinkObject' && asso:Name eq 'playedRole')
}

numeric isAccessibleProperty(map attr) {
	super(attr) && !isDerived(attr)
}

numeric isAccessibleAssociation(map asso) {
	super(asso) && !isDerived(asso)
}

numeric isPrimitive(map type) {
	string typename
	if(type:Namespace eq 'uml.Foundations.Data Types') {
		typename = javaTypeForUmlType(type)
	} else {
		typename = type:Name
	}
	
	typename eq 'int'
      || typename eq 'long'
      || typename eq 'short'
      || typename eq 'char'
      || typename eq 'byte'
      || typename eq 'boolean'
      || typename eq 'float'
      || typename eq 'double'
}

string annotations() {
'@SuppressWarnings("unused")'
}


map additionalPropertyMap() {
	additionalPropertyMap(This)
}

map additionalPropertyMap(map element) {
	map attrMap
	if(isInstanceOf(element, 'ModelElement')) {
		map assoClassMap
		foreach asso
				| asso:Association:ElementType eq 'AssociationClass'
				<- element:AllAssociations {
			assoClassMap.put(asso:Association:Name, asso:Association)
		}	
		list keyList = assoClassMap.keyList()
		foreach assoClassKey <- keyList {
			map element = assoClassMap[assoClassKey]
			foreach attr <- element:Attributes {
				attrMap.put(attr:Name, attr)
			}
		}
	}
	attrMap
}

numeric isReferenceAttribute(map attr) {
	attr:Type:Name eq 'Multiplicity'
	|| attr:Type:Name eq 'Geometry'
	|| attr:Type:Name eq 'LocationReference'
	|| attr:Type:Name.endsWith('Expression')
}

?><?!--
Use lists for the unordered collections too
so that the insertion order of the elements
is stable across generations
--?><?

string associationCollectionType(map asso) {
	string type = super(asso)
	if(type eq 'Set') {
		type = 'List'
	}
	type
}

string associationCollectionImplementation(map asso) {
	string type = associationCollectionType(asso)
	if(type eq 'Set' || type eq 'SortedSet') {
		'ArrayList'
	} else {
		super(asso)
	}
}

?>