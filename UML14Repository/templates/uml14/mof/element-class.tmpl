/*
 * Java bean <?name(This)?>
 * Implementation of interface <?Name?>.
<? generationInfo(' * ')?>
 */

package <?namespace(This)?>;

import java.util.*;

import org.soulspace.modelling.base.*;
import org.soulspace.modelling.uml14.elements.*;
import org.soulspace.modelling.uml14.types.*;
<?importJavaOverrides(This)?>
<?
javaDoc(This)
annotations(This)?>
<?visibility(This)?> abstract class <?name(This)?> extends AbstractXmiObject <?implementations(This)?> {

	// Fields<?
propertyFields(This)
associationFields(This)
?>

	// Constructors<?
constructors(This)
?>

	// Accessors<?
propertyAccessors(This)
associationAccessors(This)
?>

	// Operations<?
operations(This)
?>

	// Object methods<?
equals(This)
hashcode(This)
?>
}
<?
string propertyFields(map element) {
	map attrMap = additionalPropertyMap(element)
	foreach attr | !isDerived(attr) <- element:AllAttributeList {
		attrMap.put(attr:Name, attr)
	}
	list keyList = attrMap.keyList()
	foreach attrKey <- keyList {	
		propertyField(attrMap[attrKey])
	}
}

string propertyAccessors(map element) {
	map attrMap = additionalPropertyMap(element)
	foreach attr | isAccessibleProperty(attr) <- element:AllAttributeList {
		attrMap.put(attr:Name, attr)
	}
	list keyList = attrMap.keyList()
	foreach attrKey <- keyList {	
		propertyAccessor(attrMap[attrKey])
	}
}

string associationFields(map element) {
	map assoMap
	foreach asso | isAccessibleAssociation(asso) && !isDerived(asso) <- element:AllAssociations {
		assoMap.put(asso:Name, asso)
	}
	list keyList = assoMap.keyList()
	foreach assoKey <- keyList {	
		associationField(assoMap[assoKey])
	}
}

string associationAccessors(map element) {
	map assoMap
	foreach asso | isAccessibleAssociation(asso) && !isDerived(asso) <- element:AllAssociations {
		assoMap.put(asso:Name, asso)
	}
	list keyList = assoMap.keyList()
	foreach assoKey <- keyList {	
		associationAccessor(assoMap[assoKey])
	}
}

string associationSetAnnotations(map asso) {
	if(isComposition(asso:SourceEnd)) {?>
	@Composition<?
	}
}

string associationAddAnnotations(map asso) {
	if(isComposition(asso:SourceEnd)) {?>
	@Composition<?
	}
}

string associationRemoveAnnotations(map asso) {
	if(isComposition(asso:SourceEnd)) {?>
	@Composition<?
	}
}
?>