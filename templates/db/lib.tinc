<?!--
 * db/lib
 *
 * Methods for the generation of SQL database scripts and queries
 * Unspecific to any UML profile, design DSL or target language
 *
 * ©2010-2012 Ludger Solbach
 --?><?
string dbName(string name) {
	name.camelCaseToUnderScore()
}

string dbName(map element) {
	if(element:Name) {
		dbName(element:Name)
	} else {
		dbName(element:Type:Name)
	}	
}

string tableName(map element) {
	dbName(element)
}

string tableName() {
	tableName(This)
}

string columnName(map element, map attr) {
	dbName(attr)
}

string columnName(map element, string name) {
	dbName(name)
}

string columnName(map attr) {
	columnName(attr:ParentElement, attr)
}

string associationColumnName(map element, map asso) {
	dbName(asso)
}

string associationColumnName(map asso) {
	associationColumnName(asso:SourceEnd:Type, asso)
}

string foreignKeyName(map asso) {
	associationColumnName(asso) + '_id'
}

string foreignKeyName() {
	foreignKeyName(This)
}

string indexName(map element) {
  dbName(element:SourceEnd:Type) + '_idx'
}

string indexName() {
	indexName(This)
}

string associationTableName(map asso) {
	dbName(asso)
}

list attributes(map element) {
	list attrColumnList
	foreach attr | !isDerived(attr) <- element:AllAttributeList {
		attrColumnList.add(attribute(attr))
	}
	attrColumnList
}

string attribute(map attr) {
	columnName(attr) + ' ' + sqlType(attr) + ' ' + optional(attr)
}

list associations(map element) {
	list assoColumnList
	foreach asso | !isDerived(asso) <- element:AllAssociationList {
		string column = association(asso)
		if(column) {
			assoColumnList.add(column)
		}
	}
	assoColumnList
}

string foreignKey(map asso) {
 	foreignKeyName(asso) + ' ' + sqlType('Id') + optional(asso)
}

string optional(map element) {
	if(isOptional(element)) {
		'null'
	} else {
		'not null'
	}
}

string sqlType(map element) {
	if(element:Type:Name eq 'String' || element:Type:Name eq 'string') {
		if(hasTaggedValue(element, 'maxLength')) {
			sqlType(element:Type:Name, toNumeric(taggedValue(element, 'maxLength')))
		} else {
			sqlType(element:Type:Name)
		}
	} else if(isBlob(element)) {
		if(hasTaggedValue(element, 'maxLength')) {
			sqlType('BLOB',  toNumeric(taggedValue(element, 'maxLength')))
		} else {
			sqlType('BLOB')
		}
	} else {
		sqlType(element:Type:Name)
	}
}

string sqlType(string typeName) {
	if(typeName eq 'String' || typeName eq 'string') {
		sqlType(typeName, 254)
	} else if(typeName eq 'boolean' || typeName eq 'Boolean') {
		'smallint'
	} else if(typeName eq 'byte' || typeName eq 'Byte') {
		'smallint'
	} else if(typeName eq 'char' || typeName eq 'Char') {
		'smallint'
	} else if(typeName eq 'short' || typeName eq 'Short') {
		'smallint'
	} else if(typeName eq 'int' || typeName eq 'Integer') {
		'integer'
	} else if(typeName eq 'long' || typeName eq 'Long') {
		'integer'
	} else if(typeName eq 'float' || typeName eq 'Float') {
		'numeric(20,10)'
	} else if(typeName eq 'double' || typeName eq 'Double') {
		'numeric(20,10)'
	} else if(typeName eq 'TimeStamp') {
		'timestamp'
	} else if(typeName eq 'Time') {
		'time'
	} else if(typeName eq 'Date') {
		'date'
	} else if(typeName eq 'BLOB') {
		'BLOB'
	} else if(typeName eq 'Id') {
		'varchar(20)'
	}
}

string sqlType(string typeName, numeric length) {
	if(typeName eq 'String' || typeName eq 'string') {
		'varchar(' + length + ')'
	} else if(typeName eq 'BLOB') {
		'BLOB('+ length +')'
	} else {
		sqlType(typeName)
	}
}
?>