<?
string importJavaOverrides(map element) {
	if(element:Name eq 'Class') {
		'import org.soulspace.modelling.uml14.elements.Class;'
	} else if(element:Name eq 'Object') {
		'import org.soulspace.modelling.uml14.elements.Object;' 
	} else if(element:Name eq 'Package') {
		'import org.soulspace.modelling.uml14.elements.Package;' 
	} else if(element:Name eq 'Exception') {
		'import org.soulspace.modelling.uml14.elements.Exception;' 
	} else if(element:Name eq 'Enumeration') {
		'import org.soulspace.modelling.uml14.elements.Enumeration;' 
	} else if(element:Name eq 'EnumerationLiteral') {
		'import org.soulspace.modelling.uml14.elements.Enumeration;' 
	}
}

string imports(map element) {
	super(element)
	importJavaOverrides(element)
}

list getAttributeList(map element) {
	super(element) + getAdditionalAttributeList(element)
}
?><?!--
list getAttributeList(map element) {
	list attributeList
	map attributeMap /* avoid duplicates */
	foreach attr | !attributeMap[attr:Name] <- element:AllAttributeList {
		attributeList = attributeList.add(attr)
		add(attributeMap, attr:Name)
	}
	foreach attr | !attributeMap[attr:Name] <- getAdditionalAttributeList(element) {
		attributeList = attributeList.add(attr)
	}
	attributeList
}--?><?

list getAssociationList(map element) {
	element:AllAssociationList
}

list getOperationList(map element) {
	element:OperationList
}

/* get the attributes of association classes of ModelElement */
list getAdditionalAttributeList(map element) {
	list addList
	map attrMap	/* collect attributes in map to avoid duplicates */
	foreach attr <- element:AllAttributeList {
		attrMap.put(attr:Name, attr)
	}

	if(isAssignableTo(element, 'ModelElement')) {
		/* collect association classes for ModelElement */
		map assoClassMap
		foreach asso
				| asso:Association:ElementType eq 'AssociationClass'
				<- element:AllAssociationList {
			assoClassMap.put(asso:Association:Name, asso:Association)
		}
		/* collect attributes in map to avoid duplicates */
		foreach assoClassKey <- assoClassMap.keyList() {
			map asso = assoClassMap[assoClassKey]
			foreach attr | !attrMap[attr:Name] <- asso:AttributeList {
				attrMap.put(attr:Name, attr)
				addList.add(attr)		
			}
		}
	}
	addList
}

/* INFO: these associations have overloaded types in the UML 1.4 model and can not be transformed to java in a clean way at the moment. */
numeric isSuppressedAssociation(map element, map asso) {
	(element:Name eq 'Instance' && asso:Name eq 'owner')
	||
	(element:Name eq 'Instance' && asso:Name eq 'ownedInstance')
	||
	(element:Name eq 'LinkObject' && asso:Name eq 'owner')
	||
	(element:Name eq 'LinkObject' && asso:Name eq 'playedRole')
}

numeric isAccessibleProperty(map attr) {
	super(attr) && !isDerived(attr)
}

numeric isAccessibleAssociation(map asso) {
	super(asso) && !isDerived(asso)
}

string javaType(map element) {
	if(isAttribute(element) && isMany(element)) {
		javaTypeForType(element:Type)	
	} else {
		super(element)
	}
}

string javaTypeForType(map type, string generic) {
	if(type:Namespace eq 'uml.Foundations.DataTypes') {
		javaTypeForUmlType(type)
	} else if(generic) {
		type:Name + '<' + generic + '>'
	} else {
		type:Name
	}
}

/* Use lists for the unordered collections too so that the insertion order of the elements is stable across generations */
string associationCollectionType(map asso) {
	string type = super(asso)
	if(type eq 'Set') {
		type = 'List'
	}
	type
}

/* Use lists for the unordered collections too so that the insertion order of the elements is stable across generations */
string associationCollectionImplementation(map asso) {
	string type = associationCollectionType(asso)
	if(type eq 'Set' || type eq 'SortedSet') {
		'ArrayList'
	} else {
		super(asso)
	}
}
numeric isPrimitive(map type) {
	string typename
	if(type:Namespace eq 'uml.Foundations.DataTypes') {
		typename = javaTypeForUmlType(type)
	} else {
		typename = type:Name
	}
	
	typename eq 'int'
      || typename eq 'long'
      || typename eq 'short'
      || typename eq 'char'
      || typename eq 'byte'
      || typename eq 'boolean'
      || typename eq 'float'
      || typename eq 'double'
}

numeric isReferenceAttribute(map attr) {
	attr:Type:Name eq 'Multiplicity'
	|| attr:Type:Name eq 'Geometry'
	|| attr:Type:Name eq 'LocationReference'
	|| attr:Type:Name.endsWith('Expression')
}

?>