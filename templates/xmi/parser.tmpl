<?
list elementList = elementList()
?>package <?namespace()?>;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Stack;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

import org.soulspace.xmi.base.*;
import org.soulspace.xmi.uml14.elements.*;
import org.soulspace.xmi.uml14.elements.Class;
import org.soulspace.xmi.uml14.elements.Exception;
import org.soulspace.xmi.uml14.elements.Object;
import org.soulspace.xmi.uml14.elements.Package;
import org.soulspace.xmi.uml14.elements.impl.*;
import org.soulspace.xmi.uml14.types.*;

public class XmiParserImpl extends DefaultHandler {

	private XMLReader xmlReader;
	private XmiRepositoryImpl xmiRepository;
	private Stack<XmiObject> elementStack;
	private boolean profile = false;

	protected StringBuilder sb;

	public XmiParserImpl() {
		super();
		try {
			xmlReader = XMLReaderFactory.createXMLReader();
			xmlReader.setContentHandler(this);
			xmlReader.setErrorHandler(this);
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void parseXmi(File file, boolean profile) throws SAXException, IOException {
		elementStack = new Stack<XmiObject>();
	    FileReader r = new FileReader(file);
	    this.profile = profile;					
	    xmlReader.parse(new InputSource(r));
	}

	/*
	 *  (non-Javadoc)
	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
	 */
	public void startElement(String uri, String name, String qName, Attributes attrs) {
		String elementName = "";
		if ("".equals (uri)) {
	    	elementName = qName;
		} else {
	    	elementName = name;
		}
<?dispatchStartElement(elementList)?>
	}

	/*
	 *  (non-Javadoc)
	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
	 */
	public void endElement(String uri, String name, String qName) {
		String elementName;
		if ("".equals (uri)) {
	    	elementName = qName;
		} else {
	    	elementName = name;
		}
<?dispatchEndElement(elementList)?>
	}
	
	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#characters(char[], int, int)
	 */
	public void characters(char[] ch, int start, int length) throws SAXException {
		String data;
		if(elementStack.peek() != null) {
			data = charsToString(ch, start, length);
			// TODO handle lines with just blanks at the end of the text
			sb.append(data);				
		}
	}

	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#ignorableWhitespace(char[], int, int)
	 */
	public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
		System.out.println("ignorableWhitespace");
		super.ignorableWhitespace(ch, start, length);
		// Ignore as the method suggests
	}

	protected String charsToString(char[] ch, int start, int length) {
		StringBuilder sb = new StringBuilder();
		for(int i = start; i < start + length; i++) {
			sb.append(ch[i]);
		}
		String data = sb.toString();
		if(data.startsWith("\n") && data.endsWith("\n")) {
			return data.substring(1, data.length());
		} else if(data.startsWith("\n")) {
			return data.substring(1);
		} else if(data.endsWith("\n")) {
			return data;
		} else {
			return data + "\n";
		}
	}	

<?handleStartElement(elementList)?>
<?handleEndElement(elementList)?>
}
<?

list elementList() {
	list elementList
	foreach package <- Packages {
		foreach class | !class:StereotypeMap <- package:Classes {
			if(!isAbstract(class)) {
				elementList.add(class)
			}
			foreach asso | asso:Name && !isDerived(asso) <- class:Associations {
				elementList.add(asso)
			}
		}
	}
	elementList
}

string dispatchStartElement(list elementList) {
	foreach element <- elementList {
		if(element:ElementType eq 'Class') {?>
		// Class <?element:Name?>
		if(elementName.equals("<?element:Name?>")) {
			start<?element:Name?>(attrs);
		}
		<?
		} else if(element:ElementType eq 'AssociationEnd') {?>
		// Asso <?element:SourceEnd:Type:Name?>.<?element:Name?>
		if(elementName.equals("<?element:SourceEnd:Type:Name?>.<?element:Name?>")) {
			start<?element:SourceEnd:Type:Name?>_<?element:Name.firstUpper()?>(attrs);
		}
		<?
		}
	}
}

string dispatchEndElement(list elementList) {
	foreach element <- elementList {
		if(element:ElementType eq 'Class') {?>
		// Class <?element:Name?>
		if(elementName.equals("<?element:Name?>")) {
			end<?element:Name?>();
		}
		<?
		} else if(element:ElementType eq 'AssociationEnd') {?>
		// Asso <?element:SourceEnd:Type:Name?>.<?element:Name?>
		if(elementName.equals("<?element:SourceEnd:Type:Name?>.<?element:Name?>")) {
			end<?element:SourceEnd:Type:Name?>_<?element:Name.firstUpper()?>();
		}
		<?
		}
	}
}

string handleStartElement(list elementList) {
	foreach element <- elementList {
		if(element:ElementType eq 'Class') {?>
	protected void start<?element:Name?>(Attributes attrs) {
		<?element:Name?> element = new <?element:Name?>Impl();
		element.setProfileElement(profile);
		if(attrs.getValue("xmi.id") != null) {
			element.setXmiId(attrs.getValue("xmi.id"));
		}
		if(attrs.getValue("xmi.idref") != null) {
			element.setXmiIdRef(attrs.getValue("xmi.idref"));
		}
		if(attrs.getValue("href") != null) {
			element.setHRef(attrs.getValue("href"));
		}
<?
			foreach attr | !isDerived(attr) <- element:AllAttributes {?>
		if(attrs.getValue("<?attr:Name?>") != null) {<?
				if(attr:Type:Name eq 'Boolean') {?>
			element.set<?attr:Name.firstUpper()?>(java.lang.Boolean.getBoolean(attrs.getValue("<?attr:Name?>")));<?
				} else if(attr:Type:Name eq 'Multiplicity') {?>
			// handle multiplicity correctly<?
				} else if(attr:Type:Name.endsWith('Expression')) {?>
			// handle expressions correctly<?
				} else if(hasStereotype(attr:Type, 'enumeration')) {?>
			element.set<?attr:Name.firstUpper()?>(<?attr:Type:Name?>.valueOf(attrs.getValue("<?attr:Name?>")));<?
				} else {?>
			element.set<?attr:Name.firstUpper()?>(attrs.getValue("<?attr:Name?>"));<?
				}?>
		}<?
			}?>
		elementStack.push(element);
	}
<?
		} else if(element:ElementType eq 'AssociationEnd') {?>
	protected void start<?element:SourceEnd:Type:Name?>_<?element:Name.firstUpper()?>(Attributes attrs) {
		// <?element:Name?> element = new <?element:Name?>Impl();
		// element.setProfileElement(profile);
		// elementStack.push(element);
	}
<?
		}
	}
}

string handleEndElement(list elementList) {
	foreach element <- elementList {
		if(element:ElementType eq 'Class') {?>
	protected void end<?element:Name?>() {
		<?element:Name?> element = elementStack.peek();
		xmiRepository.register<?element:Name?>(element);

		// if(elementStack.peek()) {
		//	XmiObject parent = elementStack.peek();
		//	element.setParent(parent);<?
			if(!isMany(element)) {?>
		//	parent.set<?element:Name.firstUpper()?>(element);<?
			} else {?>
		//	parent.add<?element:Name.firstUpper()?>(element);<?
			}?>
		// }
	}
<?
		} else if(element:ElementType eq 'AssociationEnd') {?>
	protected void end<?element:SourceEnd:Type:Name?>_<?element:Name.firstUpper()?>() {
		<?element:Type:Name?> element = elementStack.pop();

		if(elementStack.peek()) {
			<?element:SourceEnd:Type:Name?> parent = elementStack.peek();
			element.setParent(parent);<?
			if(!isMany(element)) {?>
			parent.set<?element:Name.firstUpper()?>(element);<?
			} else {?>
			parent.add<?element:Name.firstUpper()?>(element);<?
			}?>
		}
	}
<?	
		}
	}
}
?>